<?php
/**
 * FIXME: Edit Title Content
 *
 * FIXME: Edit Description Content
 *
 * Please do not edit this file. This file is part of the Response core framework and all modifications
 * should be made in a child theme.
 * FIXME: POINT USERS TO DOWNLOAD OUR STARTER CHILD THEME AND DOCUMENTATION
 *
 * @category Response
 * @package  Framework
 * @since    1.0
 * @author   CyberChimps
 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v2.0 (or later)
 * @link     http://www.cyberchimps.com/
 */

// FIXME: Fix documentation
// Load Core
require_once( get_template_directory() . '/core/init.php' );

// FIXME: Fix documentation
// Set the content width based on the theme's design and stylesheet.
if ( ! isset( $content_width ) )
	$content_width = 640; /* pixels */
	
// FIXME: Fix documentation
// Enqueue core scripts and core styles
function response_scripts() {
	global $post;

	wp_enqueue_style( 'theme-style', get_stylesheet_directory_uri() . '/inc/css/theme.css', array('style'), '1.0' );	
}
add_action( 'wp_enqueue_scripts', 'response_scripts', 20 );

// FIXME: Fix documentation
// TODO: Rename and rework function
function response_add_site_info() { ?>
	<p>&copy; Company Name</p>	
<?php }
add_action('response_site_info', 'response_add_site_info');

// TODO: Rename and Restructure Code for Theme Options
add_action( 'customize_register', 'themename_customize_register' );
function themename_customize_register($wp_customize) {

$wp_customize->add_section( 'themename_color_scheme', array(
	'title'          => __( 'Color Scheme', 'themename' ),
	'priority'       => 35,
) );


$wp_customize->add_setting( 'plugin_options[core_color]', array(
	'default'        => '#000000',
	'type'           => 'option',
	'capability'     => 'edit_theme_options',
	'transport'		=> 'postMessage',
) );


$wp_customize->add_control( new WP_Customize_Color_Control( $wp_customize, 'core_color', array(
	'label'   => __( 'Link Color', 'themename' ),
	'section' => 'themename_color_scheme',
	'settings'   => 'plugin_options[core_color]',
) ) );

if ( $wp_customize->is_preview() && ! is_admin() )
	add_action( 'wp_footer', 'themename_customize_preview', 21);
	
}

function themename_customize_preview() {
	?>
	<script type="text/javascript">
	wp.customize('plugin_options[core_color]',function( value ) {
		value.bind(function(to) {
			jQuery('body').css('background', to );
		});
	});
	</script>
	<?php 
}

add_action('wp', 'response_wp');
function response_wp() {

	$left_is_active = false;
	$right_is_active = true;
	$both_on_one_side = false;

	if ( !is_404() ) {
		
		// TODO: Get page and post options and check to see if page layout is full width
		if ( $left_is_active && $right_is_active ) {
			add_action( 'response_before_content_container', 'response_add_sidebar_left');
			add_action( 'response_after_content_container', 'response_add_sidebar_right');
			add_filter( 'response_content_class', 'response_class_span6');
			add_filter( 'response_sidebar_left_class', 'response_class_span3');
			add_filter( 'response_sidebar_right_class', 'response_class_span3');
		} else if ($both_on_one_side) {
			add_action( 'response_after_content_container', 'response_add_sidebar_left');
			add_action( 'response_after_content_container', 'response_add_sidebar_right');
			add_filter( 'response_content_class', 'response_class_span6');
			add_filter( 'response_sidebar_left_class', 'response_class_span3');
			add_filter( 'response_sidebar_right_class', 'response_class_span3');
		} else if ($left_is_active) {
			add_action( 'response_before_content_container', 'response_add_sidebar_left');
			add_filter( 'response_content_class', 'response_class_span9');
			add_filter( 'response_sidebar_left_class', 'response_class_span3');
		} else if ($right_is_active) {
			add_action( 'response_after_content_container', 'response_add_sidebar_right');
			add_filter( 'response_content_class', 'response_class_span9');
			add_filter( 'response_sidebar_right_class', 'response_class_span3');
		}
	
	} else {
		add_filter( 'response_content_class', 'response_class_span12');
	}

}

// FIXME: Fix documentation
class Response_Walker extends Walker_Nav_Menu {
	
	// FIXME: Fix documentation
    function start_lvl( &$output, $depth ) {
		//In a child UL, add the 'dropdown-menu' class
		if( $depth == 0 ) {
			$indent = str_repeat( "\t", $depth );
			$output .= "\n$indent<ul class=\"dropdown-menu\">\n";
		} else {
			$indent = str_repeat( "\t", $depth );
			$output .= "\n$indent<ul>\n";
		}
	}
	
	// FIXME: Fix documentation
	function start_el( &$output, $item, $depth = 0, $args = array(), $id = 0 ) {

		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';

		$li_attributes = '';
		$class_names = $value = '';

		$classes = empty( $item->classes ) ? array() : ( array ) $item->classes;

		//Add class and attribute to LI element that contains a submenu UL.
		if ( $args->has_children && $depth < 1 ){
			$classes[] 		= 'dropdown';
			$li_attributes .= 'data-dropdown="dropdown"';
		}
		$classes[] = 'menu-item-' . $item->ID;
		//If we are on the current page, add the active class to that menu item.
		$classes[] = ($item->current) ? 'active' : '';

		//Make sure you still add all of the WordPress classes.
		$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args ) );
		$class_names = ' class="' . esc_attr( $class_names ) . '"';

		$id = apply_filters( 'nav_menu_item_id', 'menu-item-'. $item->ID, $item, $args );
		$id = strlen( $id ) ? ' id="' . esc_attr( $id ) . '"' : '';

		$output .= $indent . '<li' . $id . $value . $class_names . $li_attributes . '>';
		//Add attributes to link element.
		$attributes  = ! empty( $item->attr_title ) ? ' title="'  . esc_attr( $item->attr_title ) .'"' : '';
		$attributes .= ! empty( $item->target ) ? ' target="' . esc_attr( $item->target     ) .'"' : '';
		$attributes .= ! empty( $item->xfn ) ? ' rel="'    . esc_attr( $item->xfn        ) .'"' : '';
		$attributes .= ! empty( $item->url ) ? ' href="'   . esc_attr( $item->url        ) .'"' : '';
		$attributes .= ($args->has_children && $depth < 1) ? ' class="dropdown-toggle"' : '';

		$item_output = $args->before;
		$item_output .= '<a'. $attributes .'>';
		$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;
		$item_output .= ($args->has_children && $depth < 1) ? ' <b class="caret"></b> ' : ''; 
		$item_output .= '</a>';
		$item_output .= $args->after;

		$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );
	}
	
	// FIXME: Fix documentation
	//Overwrite display_element function to add has_children attribute. Not needed in >= Wordpress 3.4
	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {

		if ( !$element )
			return;

		$id_field = $this->db_fields['id'];
		
		//display this element
		if ( is_array( $args[0] ) ) 
			$args[0]['has_children'] = ! empty( $children_elements[$element->$id_field] );
		else if ( is_object( $args[0] ) ) 
			$args[0]->has_children = ! empty( $children_elements[$element->$id_field] ); 
		$cb_args = array_merge( array(&$output, $element, $depth), $args);
		call_user_func_array(array(&$this, 'start_el'), $cb_args);

		$id = $element->$id_field;

		// descend only when the depth is right and there are childrens for this element
		if ( ($max_depth == 0 || $max_depth > $depth+1 ) && isset( $children_elements[$id]) ) {

			foreach( $children_elements[ $id ] as $child ){

				if ( !isset($newlevel) ) {
					$newlevel = true;
					//start the child delimiter
					$cb_args = array_merge( array(&$output, $depth), $args);
					call_user_func_array(array(&$this, 'start_lvl'), $cb_args);
				}
				$this->display_element( $child, $children_elements, $max_depth, $depth + 1, $args, $output );
			}
				unset( $children_elements[ $id ] );
		}

		if ( isset($newlevel) && $newlevel ){
			//end the child delimiter
			$cb_args = array_merge( array(&$output, $depth), $args);
			call_user_func_array(array(&$this, 'end_lvl'), $cb_args);
		}

		//end this element
		$cb_args = array_merge( array(&$output, $element, $depth), $args);
		call_user_func_array(array(&$this, 'end_el'), $cb_args);
	}
}

// FIXME: Fix documentation	
// Sets fallback menu for 1 level. Could use preg_split to have children displayed too
function response_fallback_menu() {
	$args = array(
		'depth'        => 1,
		'show_date'    => '',
		'date_format'  => '',
		'child_of'     => 0,
		'exclude'      => '',
		'include'      => '',
		'title_li'     => '',
		'echo'         => 0,
		'authors'      => '',
		'sort_column'  => 'menu_order, post_title',
		'link_before'  => '',
		'link_after'   => '',
		'walker'       => '',
		'post_type'    => 'page',
		'post_status'  => 'publish' 
	);
	$pages = wp_list_pages( $args );
	$prepend = '<ul id="menu-menu" class="nav">';
	$append = '</ul>';
	echo $prepend.$pages.$append;
}

if ( ! function_exists( 'response_comment' ) ) :
// FIXME: Fix documentation
// Template for comments and pingbacks.
// Used as a callback by wp_list_comments() for displaying the comments.
function response_comment( $comment, $args, $depth ) {
	$GLOBALS['comment'] = $comment;
	switch ( $comment->comment_type ) :
		case 'pingback' :
		case 'trackback' :
	?>
	<li class="post pingback">
		<p><?php _e( 'Pingback:', 'response' ); ?> <?php comment_author_link(); ?><?php edit_comment_link( __( '(Edit)', 'response' ), ' ' ); ?></p>
	<?php
			break;
		default :
	?>
	<li <?php comment_class(); ?> id="li-comment-<?php comment_ID(); ?>">
		<article id="comment-<?php comment_ID(); ?>" class="comment">
			<footer>
				<div class="comment-author vcard">
					<?php echo get_avatar( $comment, 40 ); ?>
					<?php printf( __( '%s <span class="says">says:</span>', 'response' ), sprintf( '<cite class="fn">%s</cite>', get_comment_author_link() ) ); ?>
				</div><!-- .comment-author .vcard -->
				<?php if ( $comment->comment_approved == '0' ) : ?>
					<em><?php _e( 'Your comment is awaiting moderation.', 'response' ); ?></em>
					<br />
				<?php endif; ?>

				<div class="comment-meta commentmetadata">
					<a href="<?php echo esc_url( get_comment_link( $comment->comment_ID ) ); ?>"><time pubdate datetime="<?php comment_time( 'c' ); ?>">
					<?php
						/* translators: 1: date, 2: time */
						printf( __( '%1$s at %2$s', 'response' ), get_comment_date(), get_comment_time() ); ?>
					</time></a>
					<?php edit_comment_link( __( '(Edit)', 'response' ), ' ' );
					?>
				</div><!-- .comment-meta .commentmetadata -->
			</footer>

			<div class="comment-content"><?php comment_text(); ?></div>

			<div class="reply">
				<?php comment_reply_link( array_merge( $args, array( 'depth' => $depth, 'max_depth' => $args['max_depth'] ) ) ); ?>
			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<?php
			break;
	endswitch;
}
endif; // ends check for response_comment()